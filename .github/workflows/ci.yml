name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  workflow_dispatch:
  
env:
  UV_SYSTEM_PYTHON: 1
jobs:
  linux-latest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
        node-version: ["18.x"]
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: bomiot/templates/yarn.lock
      
      - name: Add ~/.local/bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH   

      - name: Install Quasar CLI
        run: |
          yarn config set cache-folder ~/.cache/yarn
          yarn config set node-linker node-modules
          yarn global add @quasar/cli@latest

      - name: Install Python dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install -r requirements.txt
          uv pip install -e .

      - name: Init bomiot project
        run: |
          bomiot init
          bomiot project test
          bomiot migrate
          bomiot initadmin

      - name: Test bomiot project
        working-directory: test/templates
        run: |
          yarn install --frozen-lockfile
          quasar build

      - name: Run bomiot server (background)
        run: |
          nohup bomiot run > bomiot.log 2>&1 &
          sleep 10

      - name: Test login API
        run: |
          pip install requests
          python -c "import requests; resp = requests.post('http://127.0.0.1:8000/login/', json={'username': 'admin', 'password': 'admin'}); print('Status:', resp.status_code); print('Response:', resp.json()); assert resp.status_code == 200 and 'token' in resp.json(), 'Login failed or token not found'"

      - name: Build Python package
        run: |
          uv pip install build
          python -m build

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.job }}-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist


  merge:
    name: Building Single Artifact
    runs-on: ubuntu-latest
    needs: [linux-latest]
    steps:
      - name: Downloading all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: wheels-*
          merge-multiple: true
      - run: |
          echo "Listing directories"
          ls -R
      - name: Uploading Artifact's Bundle
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: artifacts
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [linux-latest, merge]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv pip install --upgrade twine
          twine upload --skip-existing *